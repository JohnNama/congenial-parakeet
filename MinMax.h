#pragma once
#include "dependencies.h"
#include "ChessPiece.h"

class ChessPiece;
class ChessBoard;
class Move;

class MinMax
{
public:
	float chess_weight_on_board[2][6][8][8] = {
		{//black pieces
			{//king
				/*{ -20, -10, -10,  -5,  -5, -10, -10, -20},
				{ -10,   0,   5,   0,   0,   0,   0, -10},
				{ -10,   5,   5,   5,   5,   5,   0, -10},
				{   0,   0,   5,   5,   5,   5,   0,  -5},
				{  -5,   0,   5,   5,   5,   5,   0,  -5},
				{ -10,   0,   5,   5,   5,   5,   0, -10},
				{ -10,   0,   0,   0,   0,   0,   0, -10},
				{ -20, -10, -10,  -5,  -5, -10, -10, -20}*/

				{  20,  30,  10,   0,   0,  10,  30,  20},
				{  20,  20,   0,   0,   0,   0,  20,  20},
				{ -10, -20, -20, -20, -20, -20, -20, -10},
				{ -20, -30, -30, -40, -40, -30, -30, -20},
				{ -30, -40, -40, -50, -50, -40, -40, -30},
				{ -30, -40, -40, -50, -50, -40, -40, -30},
				{ -30, -40, -40, -50, -50, -40, -40, -30},
				{ -30, -40, -40, -50, -50, -40, -40, -30},
			},
			{//queen
				{ -20, -10, -10,  -5,  -5, -10, -10, -20},
				{ -10,   0,   5,   0,   0,   0,   0, -10},
				{ -10,   5,   5,   5,   5,   5,   0, -10},
				{   0,   0,   5,   5,   5,   5,   0,  -5},
				{  -5,   0,   5,   5,   5,   5,   0,  -5},
				{ -10,   0,   5,   5,   5,   5,   0, -10},
				{ -10,   0,   0,   0,   0,   0,   0, -10},
				{ -20, -10, -10,  -5,  -5, -10, -10, -20}
			},
			{//rook
				{   0,   0,   0,   5,   5,   0,   0,   0},
				{  -5,   0,   0,   0,   0,   0,   0,  -5},
				{  -5,   0,   0,   0,   0,   0,   0,  -5},
				{  -5,   0,   0,   0,   0,   0,   0,  -5},
				{  -5,   0,   0,   0,   0,   0,   0,  -5},
				{  -5,   0,   0,   0,   0,   0,   0,  -5},
				{   5,  10,  10,  10,  10,  10,  10,  10},
				{   0,   0,   0,   0,   0,   0,   0,   0},
			},
			{//knight
				{ -50, -40, -30, -30, -30, -30, -40, -50},
				{ -40, -20,   0,   5,   5,   0, -20, -40},
				{ -30,   5,  10,  15,  15,  10,   5, -30},
				{ -30,   0,  15,  20,  20,  15,   0, -30},
				{ -30,   5,  15,  20,  20,  15,   5, -30},
				{ -30,   0,  10,  15,  15,  10,   0, -30},
				{ -40, -20,   0,   0,   0,   0, -20, -40},
				{ -50, -40, -30, -30, -30, -30, -40, -50}
			},
			{//bishop
				{ -20, -10, -10, -10, -10, -10, -10, -20},
				{ -10,   5,   0,   0,   0,   0,   5, -10},
				{ -10,  10,  10,  10,  10,  10,  10, -10},
				{ -10,   0,  10,  10,  10,  10,   0, -10},
				{ -10,   5,   5,  10,  10,   5,   5, -10},
				{ -10,   0,   5,  10,  10,   5,   0, -10},
				{ -10,   0,   0,   0,   0,   0,   0, -10},
				{ -20, -10, -10, -10, -10, -10, -10, -20}
			},
			{//pawn
				{   0,   0,   0,   0,   0,   0,   0,   0},
				{   5,  10,  10, -20, -20,  10,  10,   5},
				{   5,  -5, -10,   0,   0, -10,  -5,   5},
				{   0,   0,   0,   0,  20,   0,   0,   0},
				{   5,   5,  10,  25,  25,  10,   5,   5},
				{  10,  10,  20,  30,  30,  20,  10,  10},
				{  50,  50,  50,  50,  50,  50,  50,  50},
				{   0,   0,   0,   0,   0,   0,   0,   0}
			}
		},
		{//white pieces
			/*{//king
				{ -20, -10, -10,  -5,  -5, -10, -10, -20},
				{ -10,   0,   0,   0,   0,   0,   0, -10},
				{ -10,   0,   5,   5,   5,   5,   0, -10},
				{  -5,   0,   5,   5,   5,   5,   0,  -5},
				{   0,   0,   5,   5,   5,   5,   0,  -5},
				{ -10,   5,   5,   5,   5,   5,   0, -10},
				{ -10,   0,   5,   0,   0,   0,   0, -10},
				{ -20, -10, -10,  -5,  -5, -10, -10, -20}
			},*/
			{
				{ -30, -40, -40, -50, -50, -40, -40, -30},
				{ -30, -40, -40, -50, -50, -40, -40, -30},
				{ -30, -40, -40, -50, -50, -40, -40, -30},
				{ -30, -40, -40, -50, -50, -40, -40, -30},
				{ -20, -30, -30, -40, -40, -30, -30, -20},
				{ -10, -20, -20, -20, -20, -20, -20, -10},
				{  20,  20,   0,   0,   0,   0,  20,  20},
				{  20,  30,  10,   0,   0,  10,  30,  20},
			},
			{//queen
				{ -20, -10, -10,  -5,  -5, -10, -10, -20},
				{ -10,   0,   0,   0,   0,   0,   0, -10},
				{ -10,   0,   5,   5,   5,   5,   0, -10},
				{  -5,   0,   5,   5,   5,   5,   0,  -5},
				{   0,   0,   5,   5,   5,   5,   0,  -5},
				{ -10,   5,   5,   5,   5,   5,   0, -10},
				{ -10,   0,   5,   0,   0,   0,   0, -10},
				{ -20, -10, -10,  -5,  -5, -10, -10, -20}
			},
			{//rook
				{   0,   0,   0,   0,   0,   0,   0,   0},
				{   5,  10,  10,  10,  10,  10,  10,  10},
				{  -5,   0,   0,   0,   0,   0,   0,  -5},
				{  -5,   0,   0,   0,   0,   0,   0,  -5},
				{  -5,   0,   0,   0,   0,   0,   0,  -5},
				{  -5,   0,   0,   0,   0,   0,   0,  -5},
				{  -5,   0,   0,   0,   0,   0,   0,  -5},
				{   0,   0,   0,   5,   5,   0,   0,   0}
			},
			{//knight
				{ -50, -40, -30, -30, -30, -30, -40, -50},
				{ -40, -20,   0,   0,   0,   0, -20, -40},
				{ -30,   0,  10,  15,  15,  10,   0, -30},
				{ -30,   5,  15,  20,  20,  15,   5, -30},
				{ -30,   0,  15,  20,  20,  15,   0, -30},
				{ -30,   5,  10,  15,  15,  10,   5, -30},
				{ -40, -20,   0,   5,   5,   0, -20, -40},
				{ -50, -40, -30, -30, -30, -30, -40, -50}
			},
			{//bishop
				{ -20, -10, -10, -10, -10, -10, -10, -20},
				{ -10,   0,   0,   0,   0,   0,   0, -10},
				{ -10,   0,   5,  10,  10,   5,   0, -10},
				{ -10,   5,   5,  10,  10,   5,   5, -10},
				{ -10,   0,  10,  10,  10,  10,   0, -10},
				{ -10,  10,  10,  10,  10,  10,  10, -10},
				{ -10,   5,   0,   0,   0,   0,   5, -10},
				{ -20, -10, -10, -10, -10, -10, -10, -20}
			},
			{//pawn
				{   0,   0,   0,   0,   0,   0,   0,   0},
				{  50,  50,  50,  50,  50,  50,  50,  50},
				{  10,  10,  20,  30,  30,  20,  10,  10},
				{   5,   5,  10,  25,  25,  10,   5,   5},
				{   0,   0,   0,   0,  20,   0,   0,   0},
				{   5,  -5, -10,   0,   0, -10,  -5,   5},
				{   5,  10,  10, -20, -20,  10,  10,   5},
				{   0,   0,   0,   0,   0,   0,   0,   0}
			}
		}
	};

public:
	int evaluate(ChessBoard board) const;
	int minMax(int depth, int alpha, int beta, bool isMax, ChessBoard board);
	Move findBestMove(ChessBoard board);
	vector<Move>generateMoves(ChessBoard &board, bool isWhite);
};